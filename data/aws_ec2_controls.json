[
  {
    "control_id": "[EC2.1] Amazon EBS snapshots should not be publicly restorable",
    "url": "[[EC2.1] Amazon EBS snapshots should not be publicly restorable](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-1)",
    "related_requirements": "Related requirements: PCI DSS v3.2.1/1.2.1,PCI DSS v3.2.1/1.3.1,PCI DSS v3.2.1/1.3.4,PCI DSS v3.2.1/7.2.1, NIST.800-53.r5 AC-21, NIST.800-53.r5 AC-3, NIST.800-53.r5 AC-3(7), NIST.800-53.r5 AC-4, NIST.800-53.r5 AC-4(21), NIST.800-53.r5 AC-6, NIST.800-53.r5 SC-7, NIST.800-53.r5 SC-7(11), NIST.800-53.r5 SC-7(16), NIST.800-53.r5 SC-7(20), NIST.800-53.r5 SC-7(21), NIST.800-53.r5 SC-7(3), NIST.800-53.r5 SC-7(4), NIST.800-53.r5 SC-7(9)",
    "category": "Category: Protect > Secure network configuration",
    "severity": "Severity: Critical ",
    "resource_type": "Resource type: AWS::::Account",
    "config_rule": "AWS Config rule: ebs-snapshot-public-restorable-check",
    "schedule_type": "Schedule type: Periodic",
    "parameters": "Parameters: None",
    "description": "This control checks whether Amazon Elastic Block Store snapshots are not public. The control fails if Amazon EBS snapshots are restorable by anyone.EBS snapshots are used to back up the data on your EBS volumes to Amazon S3 at a specific point in time. You can use the snapshots to restore previous states of EBS volumes. It is rarely acceptable to share a snapshot with the public. Typically the decision to share a snapshot publicly was made in error or without a complete understanding of the implications. This check helps ensure that all such sharing was fully planned and intentional.",
    "remediation": "To make a public EBS snapshot private, see Share a snapshot in the Amazon EC2 User Guide. For Actions, Modify permissions, choose Private."
  },
  {
    "control_id": "[EC2.2] VPC default security groups should not allow inbound or outbound traffic",
    "url": "[[EC2.2] VPC default security groups should not allow inbound or outbound traffic](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-2)",
    "related_requirements": "Related requirements: PCI DSS v3.2.1/1.2.1,PCI DSS v3.2.1/1.3.4,PCI DSS v3.2.1/2.1, CIS AWS Foundations Benchmark v1.2.0/4.3, CIS AWS Foundations Benchmark v1.4.0/5.3, CIS AWS Foundations Benchmark v3.0.0/5.4, NIST.800-53.r5 AC-4, NIST.800-53.r5 AC-4(21), NIST.800-53.r5 SC-7, NIST.800-53.r5 SC-7(11), NIST.800-53.r5 SC-7(16), NIST.800-53.r5 SC-7(21), NIST.800-53.r5 SC-7(4), NIST.800-53.r5 SC-7(5)",
    "category": "Category: Protect > Secure network configuration",
    "severity": "Severity: High ",
    "resource_type": "Resource type:\nAWS::EC2::SecurityGroup",
    "config_rule": "AWS Config rule: vpc-default-security-group-closed",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks whether the default security group of a VPC allows inbound or outbound traffic. The control fails if the security group allows inbound or outbound traffic.The rules for the default security group allow all outbound and inbound traffic from network interfaces (and their associated instances) that are assigned to the same security group. We recommend that you don't use the default security group. Because the default security group cannot be deleted, you should change the default security group rules setting to restrict inbound and outbound traffic. This prevents unintended traffic if the default security group is accidentally configured for resources such as EC2 instances.",
    "remediation": "To remediate this issue, start by creating new least-privilege security groups. For instructions, see Create a security group in the Amazon VPC User Guide. Then, assign the new security groups to your EC2 instances. For instructions, see Change an instance's security group in the Amazon EC2 User Guide.After you assign the new security groups to your resources, remove all inbound and outbound rules from the default security groups. For instructions, see Configure security group rules in the Amazon VPC User Guide."
  },
  {
    "control_id": "[EC2.3] Attached Amazon EBS volumes should be encrypted at-rest",
    "url": "[[EC2.3] Attached Amazon EBS volumes should be encrypted at-rest](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-3)",
    "related_requirements": "Related requirements: NIST.800-53.r5 CA-9(1), NIST.800-53.r5 CM-3(6), NIST.800-53.r5 SC-13, NIST.800-53.r5 SC-28, NIST.800-53.r5 SC-28(1), NIST.800-53.r5 SC-7(10), NIST.800-53.r5 SI-7(6)",
    "category": "Category: Protect > Data Protection > Encryption of data-at-rest",
    "severity": "Severity: Medium",
    "resource_type": "Resource type:\nAWS::EC2::Volume",
    "config_rule": "AWS Config rule: encrypted-volumes",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks whether the EBS volumes that are in an attached state are encrypted. To pass this check, EBS volumes must be in use and encrypted. If the EBS volume is not attached, then it is not subject to this check.For an added layer of security of your sensitive data in EBS volumes, you should enable EBS encryption at rest. Amazon EBS encryption offers a straightforward encryption solution for your EBS resources that doesn't require you to build, maintain, and secure your own key management infrastructure. It uses KMS keys when creating encrypted volumes and snapshots.To learn more about Amazon EBS encryption, see Amazon EBS encryption in the Amazon EC2 User Guide.",
    "remediation": "There's no direct way to encrypt an existing unencrypted volume or snapshot. You can only encrypt a new volume or snapshot when you create it.If you enabled encryption by default, Amazon EBS encrypts the resulting new volume or snapshot using your default key for Amazon EBS encryption. Even if you have not enabled encryption by default, you can enable encryption when you create an individual volume or snapshot. In both cases, you can override the default key for Amazon EBS encryption and choose a symmetric customer managed key.For more information, see Creating an Amazon EBS volume and Copying an Amazon EBS snapshot in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.4] Stopped EC2 instances should be removed after a specified time period",
    "url": "[[EC2.4] Stopped EC2 instances should be removed after a specified time period](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-4)",
    "related_requirements": "Related requirements: NIST.800-53.r5 CA-9(1), NIST.800-53.r5 CM-2, NIST.800-53.r5 CM-2(2)",
    "category": "Category: Identify > Inventory",
    "severity": "Severity: Medium",
    "resource_type": "Resource type:\nAWS::EC2::Instance",
    "config_rule": "AWS Config rule: ec2-stopped-instance",
    "schedule_type": "Schedule type: Periodic",
    "parameters": "Parameters:",
    "description": "This control checks whether an Amazon EC2 instance has been stopped for longer than the allowed number of days. The control fails if an EC2 instance is stopped for longer than the maximum allowed time period. Unless you provide a custom parameter value for the maximum allowed time period, Security Hub uses a default value of 30 days.When an EC2 instance has not run for a significant period of time, it creates a security risk because the instance is not being actively maintained (analyzed, patched, updated). If it is later launched, the lack of proper maintenance could result in unexpected issues in your AWS environment. To safely maintain an EC2 instance over time in an inactive state, start it periodically for maintenance and then stop it after maintenance. Ideally, this should be an automated process.",
    "remediation": "To terminate an inactive EC2 instance, see Terminate an instance in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.6] VPC flow logging should be enabled in all VPCs",
    "url": "[[EC2.6] VPC flow logging should be enabled in all VPCs](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-6)",
    "related_requirements": "Related requirements: CIS AWS Foundations Benchmark v1.2.0/2.9, CIS AWS Foundations Benchmark v1.4.0/3.9, CIS AWS Foundations Benchmark v3.0.0/3.7, PCI DSS v3.2.1/10.3.3,PCI DSS v3.2.1/10.3.4,PCI DSS v3.2.1/10.3.5,PCI DSS v3.2.1/10.3.6, NIST.800-53.r5 AC-4(26), NIST.800-53.r5 AU-12, NIST.800-53.r5 AU-2, NIST.800-53.r5 AU-3, NIST.800-53.r5 AU-6(3), NIST.800-53.r5 AU-6(4), NIST.800-53.r5 CA-7, NIST.800-53.r5 SI-7(8)",
    "category": "Category: Identify > Logging",
    "severity": "Severity: Medium",
    "resource_type": "Resource type:\nAWS::EC2::VPC",
    "config_rule": "AWS Config rule: vpc-flow-logs-enabled",
    "schedule_type": "Schedule type: Periodic",
    "parameters": "Parameters:",
    "description": "This control checks whether Amazon VPC Flow Logs are found and enabled for VPCs. The traffic type is set to Reject. The control fails if VPC Flow Logs aren't enabled for VPCs in your account.With the VPC Flow Logs feature, you can capture information about the IP address traffic going to and from network interfaces in your VPC. After you create a flow log, you can view and retrieve its data in CloudWatch Logs. To reduce cost, you can also send your flow logs to Amazon S3.Security Hub recommends that you enable flow logging for packet rejects for VPCs. Flow logs provide visibility into network traffic that traverses the VPC and can detect anomalous traffic or provide insight during security workflows.By default, the record includes values for the different components of the IP address flow, including the source, destination, and protocol. For more information and descriptions of the log fields, see VPC Flow Logs in the Amazon VPC User Guide.",
    "remediation": "To create a VPC Flow Log, see Create a Flow Log in the Amazon VPC User Guide. After you open the Amazon VPC console, choose Your VPCs. For Filter, choose Reject or All."
  },
  {
    "control_id": "[EC2.7] EBS default encryption should be enabled",
    "url": "[[EC2.7] EBS default encryption should be enabled](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-7)",
    "related_requirements": "Related requirements: CIS AWS Foundations Benchmark v1.4.0/2.2.1, CIS AWS Foundations Benchmark v3.0.0/2.2.1, NIST.800-53.r5 CA-9(1), NIST.800-53.r5 CM-3(6), NIST.800-53.r5 SC-13, NIST.800-53.r5 SC-28, NIST.800-53.r5 SC-28(1), NIST.800-53.r5 SC-7(10), NIST.800-53.r5 SI-7(6)",
    "category": "Category: Protect > Data Protection > Encryption of data-at-rest",
    "severity": "Severity: Medium",
    "resource_type": "Resource type: AWS::::Account",
    "config_rule": "AWS Config rule: ec2-ebs-encryption-by-default",
    "schedule_type": "Schedule type: Periodic",
    "parameters": "Parameters: None",
    "description": "This control checks whether account-level encryption is enabled by default for Amazon Elastic Block Store(Amazon EBS). The control fails if the account level encryption is not enabled.When encryption is enabled for your account, Amazon EBS volumes and snapshot copies are encrypted at rest. This adds an additional layer of protection for your data. For more information, see Encryption by default in the Amazon EC2 User Guide.Note that following instance types do not support encryption: R1, C1, and M1.",
    "remediation": "To configure default encryption for Amazon EBS volumes, see Encryption by default in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.8] EC2 instances should use Instance Metadata Service Version 2 (IMDSv2)",
    "url": "[[EC2.8] EC2 instances should use Instance Metadata Service Version 2 (IMDSv2)](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-8)",
    "related_requirements": "Related requirements: CIS AWS Foundations Benchmark v3.0.0/5.6, NIST.800-53.r5 AC-3, NIST.800-53.r5 AC-3(15), NIST.800-53.r5 AC-3(7), NIST.800-53.r5 AC-6",
    "category": "Category: Protect > Network Security",
    "severity": "Severity: High",
    "resource_type": "Resource type:\nAWS::EC2::Instance",
    "config_rule": "AWS Config rule: ec2-imdsv2-check",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks whether your EC2 instance metadata version is configured with Instance Metadata Service Version 2 (IMDSv2). The control passes if HttpTokens is set to required for IMDSv2. The control fails if HttpTokens is set to optional.You use instance metadata to configure or manage the running instance. The IMDS provides access to temporary, frequently rotated credentials. These credentials remove the need to hard code or distribute sensitive credentials to instances manually or programmatically. The IMDS is attached locally to every EC2 instance. It runs on a special \"link local\" IP address of 169.254.169.254. This IP address is only accessible by software that runs on the instance.Version 2 of the IMDS adds new protections for the following types of vulnerabilities. These vulnerabilities could be used to try to access the IMDS.Security Hub recommends that you configure your EC2 instances with IMDSv2.",
    "remediation": "To configure EC2 instances with IMDSv2, see Recommended path to requiring IMDSv2 in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.9] Amazon EC2 instances should not have a public IPv4 address",
    "url": "[[EC2.9] Amazon EC2 instances should not have a public IPv4 address](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-9)",
    "related_requirements": "Related requirements: NIST.800-53.r5 AC-21, NIST.800-53.r5 AC-3, NIST.800-53.r5 AC-3(7), NIST.800-53.r5 AC-4, NIST.800-53.r5 AC-4(21), NIST.800-53.r5 AC-6, NIST.800-53.r5 SC-7, NIST.800-53.r5 SC-7(11), NIST.800-53.r5 SC-7(16), NIST.800-53.r5 SC-7(20), NIST.800-53.r5 SC-7(21), NIST.800-53.r5 SC-7(3), NIST.800-53.r5 SC-7(4), NIST.800-53.r5 SC-7(9)",
    "category": "Category: Protect > Secure network configuration > Resources not publicly accessible",
    "severity": "Severity: High",
    "resource_type": "Resource type:\nAWS::EC2::Instance",
    "config_rule": "AWS Config rule: ec2-instance-no-public-ip",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks whether EC2 instances have a public IP address. The control fails if the publicIp field is present in the EC2 instance configuration item. This control applies to IPv4 addresses only.A public IPv4 address is an IP address that is reachable from the internet. If you launch your instance with a public IP address, then your EC2 instance is reachable from the internet. A private IPv4 address is an IP address that is not reachable from the internet. You can use private IPv4 addresses for communication between EC2 instances in the same VPC or in your connected private network.IPv6 addresses are globally unique, and therefore are reachable from the internet. However, by default all subnets have the IPv6 addressing attribute set to false. For more information about IPv6, see IP addressing in your VPC in the Amazon VPC User Guide.If you have a legitimate use case to maintain EC2 instances with public IP addresses, then you can suppress the findings from this control. For more information about front-end architecture options, see the AWS Architecture Blog or the This Is My Architecture series AWS video series.",
    "remediation": "Use a non-default VPC so that your instance isn't assigned a public IP address by default.When you launch an EC2 instance into a default VPC, it is assigned a public IP address. When you launch an EC2 instance into a non-default VPC, the subnet configuration determines whether it receives a public IP address. The subnet has an attribute to determine if new EC2 instances in the subnet receive a public IP address from the public IPv4 address pool.You can disassociate an automatically-assigned public IP address from your EC2 instance. For more information, see Public IPv4 addresses and external DNS hostnames in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.10] Amazon EC2 should be configured to use VPC endpoints that are created for the Amazon EC2 service",
    "url": "[[EC2.10] Amazon EC2 should be configured to use VPC endpoints that are created for the Amazon EC2 service](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-10)",
    "related_requirements": "Related requirements: NIST.800-53.r5 AC-21, NIST.800-53.r5 AC-3, NIST.800-53.r5 AC-3(7), NIST.800-53.r5 AC-4, NIST.800-53.r5 AC-4(21), NIST.800-53.r5 AC-6, NIST.800-53.r5 SC-7, NIST.800-53.r5 SC-7(11), NIST.800-53.r5 SC-7(16), NIST.800-53.r5 SC-7(20), NIST.800-53.r5 SC-7(21), NIST.800-53.r5 SC-7(3), NIST.800-53.r5 SC-7(4)",
    "category": "Category: Protect > Secure network configuration > API\n    private access",
    "severity": "Severity: Medium",
    "resource_type": "Resource type:\nAWS::EC2::VPC",
    "config_rule": "AWS Config rule: service-vpc-endpoint-enabled",
    "schedule_type": "Schedule type: Periodic",
    "parameters": "Parameters:\n",
    "description": "This control checks whether a service endpoint for Amazon EC2 is created for each VPC. The control fails if a VPC does not have a VPC endpoint created for the Amazon EC2 service.This control evaluates resources in single account. It cannot describe resources that are outside of the account. Because AWS Config and Security Hub do not conduct cross-account checks, you will see FAILED findings for VPCs that are shared across accounts. Security Hub recommends that you suppress these FAILED findings.To improve the security posture of your VPC, you can configure Amazon EC2 to use an interface VPC endpoint. Interface endpoints are powered by AWS PrivateLink, a technology that enables you to access Amazon EC2 API operations privately. It restricts all network traffic between your VPC and Amazon EC2 to the Amazon network. Because endpoints are supported within the same Region only, you cannot create an endpoint between a VPC and a service in a different Region. This prevents unintended Amazon EC2 API calls to other Regions.To learn more about creating VPC endpoints for Amazon EC2, see Amazon EC2 and interface VPC endpoints in the Amazon EC2 User Guide.",
    "remediation": "To create an interface endpoint to Amazon EC2 from the Amazon VPC console, see Create a VPC endpoint in the AWS PrivateLink Guide. For Service name, choose com.amazonaws.region.ec2.You can also create and attach an endpoint policy to your VPC endpoint to control access to the Amazon EC2 API. For instructions on creating a VPC endpoint policy, see Create an endpoint policy in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.12] Unused Amazon EC2 EIPs should be removed",
    "url": "[[EC2.12] Unused Amazon EC2 EIPs should be removed](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-12)",
    "related_requirements": "Related requirements: PCI DSS v3.2.1/2.4, NIST.800-53.r5 CM-8(1)",
    "category": "Category: Protect > Secure network configuration",
    "severity": "Severity: Low",
    "resource_type": "Resource type:\nAWS::EC2::EIP",
    "config_rule": "AWS Config rule: eip-attached",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks whether Elastic IP (EIP) addresses that are allocated to a VPC are attached to EC2 instances or in-use elastic network interfaces (ENIs).A failed finding indicates you may have unused EC2 EIPs.This will help you maintain an accurate asset inventory of EIPs in your cardholder data environment (CDE).",
    "remediation": "To release an unused EIP, see Release an Elastic IP address in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.13] Security groups should not allow ingress from\n                0.0.0.0/0 or ::/0 to port 22",
    "url": "[[EC2.13] Security groups should not allow ingress from\n                0.0.0.0/0 or ::/0 to port 22](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-13)",
    "related_requirements": "Related requirements: CIS AWS Foundations Benchmark\n            v1.2.0/4.1, PCI DSS v3.2.1/1.2.1,PCI DSS v3.2.1/1.3.1,PCI DSS v3.2.1/2.2.2,\n            NIST.800-53.r5 AC-4, NIST.800-53.r5 AC-4(21), NIST.800-53.r5 CM-7, NIST.800-53.r5 SC-7,\n            NIST.800-53.r5 SC-7(11), NIST.800-53.r5 SC-7(16), NIST.800-53.r5 SC-7(21),\n            NIST.800-53.r5 SC-7(4), NIST.800-53.r5 SC-7(5)",
    "category": "Category: Protect > Secure network\n            configuration",
    "severity": "Severity: High",
    "resource_type": "Resource type:\nAWS::EC2::SecurityGroup",
    "config_rule": "AWS Config rule: restricted-ssh",
    "schedule_type": "Schedule type: Change triggered and periodic",
    "parameters": "Parameters: None",
    "description": "This control checks whether an Amazon EC2 security group allows ingress from 0.0.0.0/0 or ::/0 to port 22. The control fails if the security group allows ingress from 0.0.0.0/0 or ::/0 to port 22.Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. We recommend that no security group allow unrestricted ingress access to port 22. Removing unfettered connectivity to remote console services, such as SSH, reduces a server's exposure to risk.",
    "remediation": "To prohibit ingress to port 22, remove the rule that allows such access for each security group associated with a VPC. For instructions, see Update security group rules in the Amazon EC2 User Guide. After selecting a security group in the Amazon EC2 console, choose Actions, Edit inbound rules. Remove the rule that allows access to port 22."
  },
  {
    "control_id": "[EC2.14] Security groups should not allow ingress from 0.0.0.0/0 or ::/0 to port 3389",
    "url": "[[EC2.14] Security groups should not allow ingress from 0.0.0.0/0 or ::/0 to port 3389](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-14)",
    "related_requirements": "Related requirements: CIS AWS Foundations Benchmark\n            v1.2.0/4.2",
    "category": "Category: Protect > Secure network\n            configuration",
    "severity": "Severity: High",
    "resource_type": "Resource type:\nAWS::EC2::SecurityGroup",
    "config_rule": "AWS Config rule: restricted-common-ports (created rule is restricted-rdp)",
    "schedule_type": "Schedule type: Change triggered and periodic",
    "parameters": "Parameters: None",
    "description": "This control checks whether an Amazon EC2 security group allows ingress from 0.0.0.0/0 or ::/0 to port 3389. The control fails if the security group allows ingress from 0.0.0.0/0 or ::/0 to port 3389.Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. We recommend that no security group allow unrestricted ingress access to port 3389. Removing unfettered connectivity to remote console services, such as RDP, reduces a server's exposure to risk.",
    "remediation": "To prohibit ingress to port 3389, remove the rule that allows such access for each security group associated with a VPC. For instructions, see Update security group rules in the Amazon VPC User Guide. After selecting a security group in the Amazon VPC Console, choose Actions, Edit inbound rules. Remove the rule that allows access to port 3389."
  },
  {
    "control_id": "[EC2.15] Amazon EC2 subnets should not automatically assign\n                public IP addresses",
    "url": "[[EC2.15] Amazon EC2 subnets should not automatically assign\n                public IP addresses](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-15)",
    "related_requirements": "Related requirements: NIST.800-53.r5 AC-21,\n            NIST.800-53.r5 AC-3, NIST.800-53.r5 AC-3(7), NIST.800-53.r5 AC-4, NIST.800-53.r5\n            AC-4(21), NIST.800-53.r5 AC-6, NIST.800-53.r5 SC-7, NIST.800-53.r5 SC-7(11),\n            NIST.800-53.r5 SC-7(16), NIST.800-53.r5 SC-7(20), NIST.800-53.r5 SC-7(21),\n            NIST.800-53.r5 SC-7(3), NIST.800-53.r5 SC-7(4), NIST.800-53.r5 SC-7(9)",
    "category": "Category: Protect > Network Security",
    "severity": "Severity: Medium",
    "resource_type": "Resource type:\nAWS::EC2::Subnet",
    "config_rule": "AWS Config rule: subnet-auto-assign-public-ip-disabled",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks whether the assignment of public IPs in Amazon Virtual Private Cloud (Amazon VPC) subnets have MapPublicIpOnLaunch set to FALSE. The control passes if the flag is set to FALSE.All subnets have an attribute that determines whether a network interface created in the subnet automatically receives a public IPv4 address. Instances that are launched into subnets that have this attribute enabled have a public IP address assigned to their primary network interface.",
    "remediation": "To configure a subnet to not assign public IP addresses, see Modify the public IPv4 addressing attribute for your subnet in the Amazon VPC User Guide. Clear the check box for Enable auto-assign public IPv4 address."
  },
  {
    "control_id": "[EC2.16] Unused Network Access Control Lists should be\n                removed",
    "url": "[[EC2.16] Unused Network Access Control Lists should be\n                removed](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-16)",
    "related_requirements": "Related requirements: NIST.800-53.r5 CM-8(1)",
    "category": "Category: Protect > Network Security",
    "severity": "Severity: Low",
    "resource_type": "Resource type:\nAWS::EC2::NetworkAcl",
    "config_rule": "AWS Config rule: vpc-network-acl-unused-check",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks whether there are any unused network access control lists (network ACLs) in your virtual private cloud (VPC). The control fails if the network ACL isn't associated with a subnet. The control doesn't generate findings for an unused default network ACL.The control checks the item configuration of the resource AWS::EC2::NetworkAcl and determines the relationships of the network ACL.If the only relationship is the VPC of the network ACL, the control fails.If other relationships are listed, then the control passes.",
    "remediation": "For instructions on deleting an unused network ACL, see Deleting a network ACL in the Amazon VPC User Guide. You can't delete the default network ACL or an ACL that is associated with subnets."
  },
  {
    "control_id": "[EC2.17] Amazon EC2 instances should not use multiple\n                ENIs",
    "url": "[[EC2.17] Amazon EC2 instances should not use multiple\n                ENIs](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-17)",
    "related_requirements": "Related requirements: NIST.800-53.r5 AC-4(21)",
    "category": "Category: Protect > Network Security",
    "severity": "Severity: Low",
    "resource_type": "Resource type:\nAWS::EC2::Instance",
    "config_rule": "AWS Config rule: ec2-instance-multiple-eni-check",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks whether an EC2 instance uses multiple Elastic Network Interfaces (ENIs) or Elastic Fabric Adapters (EFAs). This control passes if a single network adapter is used. The control includes an optional parameter list to identify the allowed ENIs. This control also fails if an EC2 instance that belongs to an Amazon EKS cluster uses more than one ENI. If your EC2 instances need to have multiple ENIs as part of an Amazon EKS cluster, you can suppress those control findings.Multiple ENIs can cause dual-homed instances, meaning instances that have multiple subnets. This can add network security complexity and introduce unintended network paths and access.",
    "remediation": "To detach a network interface from an EC2 instance, see Detach a network interface from an instance in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.18] Security groups should only allow unrestricted\n                incoming traffic for authorized ports",
    "url": "[[EC2.18] Security groups should only allow unrestricted\n                incoming traffic for authorized ports](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-18)",
    "related_requirements": "Related requirements: NIST.800-53.r5 AC-4,\n            NIST.800-53.r5 AC-4(21), NIST.800-53.r5 SC-7, NIST.800-53.r5 SC-7(11), NIST.800-53.r5\n            SC-7(16), NIST.800-53.r5 SC-7(21), NIST.800-53.r5 SC-7(4), NIST.800-53.r5 SC-7(5)",
    "category": "Category: Protect > Secure network configuration >\n            Security group configuration",
    "severity": "Severity: High",
    "resource_type": "Resource type:\nAWS::EC2::SecurityGroup",
    "config_rule": "AWS Config rule: vpc-sg-open-only-to-authorized-ports",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters:",
    "description": "This control checks whether an Amazon EC2 security group permits unrestricted incoming traffic from unauthorized ports. The control status is determined as follows:Security groups provide stateful filtering of ingress and egress network traffic to AWS. Security group rules should follow the principal of least privileged access. Unrestricted access (IP address with a /0 suffix) increases the opportunity for malicious activity such as hacking, denial-of-service attacks, and loss of data. Unless a port is specifically allowed, the port should deny unrestricted access.",
    "remediation": "To modify a security group, see Work with security groups in the Amazon VPC User Guide."
  },
  {
    "control_id": "[EC2.19] Security groups should not allow unrestricted\n                access to ports with high risk",
    "url": "[[EC2.19] Security groups should not allow unrestricted\n                access to ports with high risk](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-19)",
    "related_requirements": "Related requirements: NIST.800-53.r5 AC-4,\n            NIST.800-53.r5 AC-4(21), NIST.800-53.r5 CA-9(1), NIST.800-53.r5 CM-2, NIST.800-53.r5\n            CM-2(2), NIST.800-53.r5 CM-7, NIST.800-53.r5 SC-7, NIST.800-53.r5 SC-7(11),\n            NIST.800-53.r5 SC-7(16), NIST.800-53.r5 SC-7(21), NIST.800-53.r5 SC-7(4), NIST.800-53.r5\n            SC-7(5)",
    "category": "Category: Protect > Restricted network access",
    "severity": "Severity: Critical",
    "resource_type": "Resource type:\nAWS::EC2::SecurityGroup",
    "config_rule": "AWS Config rule: restricted-common-ports (created rule is vpc-sg-restricted-common-ports)",
    "schedule_type": "Schedule type: Change triggered and periodic",
    "parameters": "Parameters: \"blockedPorts\": \"20,21,22,23,25,110,135,143,445,1433,1434,3000,3306,3389,4333,5000,5432,5500,5601,8080,8088,8888,9200,9300\" (not customizable)",
    "description": "This control checks whether unrestricted incoming traffic for an Amazon EC2 security group is accessible to the specified ports that are considered to be high risk. This control fails if any of the rules in a security group allow ingress traffic from '0.0.0.0/0' or '::/0' to those ports.Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. Unrestricted access (0.0.0.0/0) increases opportunities for malicious activity, such as hacking, denial-of-service attacks, and loss of data. No security group should allow unrestricted ingress access to the following ports:",
    "remediation": "To delete rules from a security group, see Delete rules from a security group in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.20] Both VPN tunnels for an AWS Site-to-Site VPN\n                connection should be up",
    "url": "[[EC2.20] Both VPN tunnels for an AWS Site-to-Site VPN\n                connection should be up](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-20)",
    "related_requirements": "Related requirements: NIST.800-53.r5 CP-10,\n            NIST.800-53.r5 CP-6(2), NIST.800-53.r5 SC-36, NIST.800-53.r5 SC-5(2), NIST.800-53.r5\n            SI-13(5)",
    "category": "Category: Recover > Resilience > High availability",
    "severity": "Severity: Medium ",
    "resource_type": "Resource\n                type:AWS::EC2::VPNConnection",
    "config_rule": "AWS Config rule: vpc-vpn-2-tunnels-up",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "A VPN tunnel is an encrypted link where data can pass from the customer network to or from AWS within an AWS Site-to-Site VPN connection. Each VPN connection includes two VPN tunnels which you can simultaneously use for high availability. Ensuring that both VPN tunnels are up for a VPN connection is important for confirming a secure and highly available connection between an AWS VPC and your remote network.This control checks that both VPN tunnels provided by AWS Site-to-Site VPN are in UP status. The control fails if one or both tunnels are in DOWN status.",
    "remediation": "To modify VPN tunnel options, see Modifying Site-to-Site VPN tunnel options in the AWS Site-to-Site VPN User Guide."
  },
  {
    "control_id": "[EC2.21] Network ACLs should not allow ingress from\n                0.0.0.0/0 to port 22 or port 3389",
    "url": "[[EC2.21] Network ACLs should not allow ingress from\n                0.0.0.0/0 to port 22 or port 3389](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-21)",
    "related_requirements": "Related requirements: CIS AWS Foundations Benchmark v1.4.0/5.1, CIS AWS Foundations Benchmark v3.0.0/5.1, NIST.800-53.r5 AC-4(21), NIST.800-53.r5 CA-9(1), NIST.800-53.r5 CM-2,\n            NIST.800-53.r5 CM-2(2), NIST.800-53.r5 CM-7, NIST.800-53.r5 SC-7, NIST.800-53.r5\n            SC-7(21), NIST.800-53.r5 SC-7(5)",
    "category": "Category: Protect > Secure Network\n            Configuration",
    "severity": "Severity: Medium ",
    "resource_type": "Resource\n                type:AWS::EC2::NetworkAcl",
    "config_rule": "AWS Config rule: nacl-no-unrestricted-ssh-rdp",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks whether a network access control list (network ACL) allows unrestricted access to the default TCP ports for SSH/RDP ingress traffic. The control fails if the network ACL inbound entry allows a source CIDR block of '0.0.0.0/0' or '::/0' for TCP ports 22 or 3389. The control doesn't generate findings for a default network ACL.Access to remote server administration ports, such as port 22 (SSH) and port 3389 (RDP), should not be publicly accessible, as this may allow unintended access to resources within your VPC.",
    "remediation": "To edit network ACL traffic rules, see Work with network ACLs in the Amazon VPC User Guide."
  },
  {
    "control_id": "[EC2.22] Unused Amazon EC2 security groups should be\n                removed",
    "url": "[[EC2.22] Unused Amazon EC2 security groups should be\n                removed](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-22)",
    "related_requirements": "RETIRED FROM SPECIFIC STANDARDS – Security Hub removed this control on September 20, 2023 \n            from the AWS Foundational Security Best Practices standard and the NIST SP 800-53 Rev. 5. This control is still part of Service-Managed Standard: AWS Control Tower. This control produces a \n            passed finding if security groups are attached to EC2 instances or to an elastic network interface. However, for certain use \n            cases, unattached security groups don't pose a security risk. You can use other EC2 controls—such as EC2.2, \n            EC2.13, EC2.14, EC2.18, and EC2.19—to monitor your security groups.",
    "category": "Category: Identify > Inventory",
    "severity": "Severity: Medium ",
    "resource_type": "Resource\n                type:AWS::EC2::NetworkInterface,\n                AWS::EC2::SecurityGroup",
    "config_rule": "AWS Config rule: ec2-security-group-attached-to-eni-periodic",
    "schedule_type": "Schedule type: Periodic",
    "parameters": "Parameters: None",
    "description": "This control checks whether security groups are attached to Amazon Elastic Compute Cloud (Amazon EC2) instances or to an elastic network interface. The control fails if the security group is not associated with an Amazon EC2 instance or an elastic network interface.",
    "remediation": "To create, assign and delete security groups, see Security groups in Amazon EC2 user guide."
  },
  {
    "control_id": "[EC2.23] Amazon EC2 Transit Gateways should not automatically\n                accept VPC attachment requests",
    "url": "[[EC2.23] Amazon EC2 Transit Gateways should not automatically\n                accept VPC attachment requests](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-23)",
    "related_requirements": "Related requirements: NIST.800-53.r5 AC-4(21),\n            NIST.800-53.r5 CA-9(1), NIST.800-53.r5 CM-2",
    "category": "Category: Protect > Secure network\n            configuration",
    "severity": "Severity: High ",
    "resource_type": "Resource\n                type:AWS::EC2::TransitGateway",
    "config_rule": "AWS Config rule: ec2-transit-gateway-auto-vpc-attach-disabled",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks if EC2 transit gateways are automatically accepting shared VPC attachments. This control fails for a transit gateway that automatically accepts shared VPC attachment requests.Turning on AutoAcceptSharedAttachments configures a transit gateway to automatically accept any cross-account VPC attachment requests without verifying the request or the account the attachment is originating from. To follow the best practices of authorization and authentication, we recommended turning off this feature to ensure that only authorized VPC attachment requests are accepted.",
    "remediation": "To modify a transit gateway, see Modify a transit gateway in the Amazon VPC Developer Guide."
  },
  {
    "control_id": "[EC2.24] Amazon EC2 paravirtual instance types should not be\n                used",
    "url": "[[EC2.24] Amazon EC2 paravirtual instance types should not be\n                used](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-24)",
    "related_requirements": "Related requirements: NIST.800-53.r5 CM-2,\n            NIST.800-53.r5 CM-2(2)",
    "category": "Category: Identify > Vulnerability, patch, and version management",
    "severity": "Severity: Medium ",
    "resource_type": "Resource\n            type:AWS::EC2::Instance",
    "config_rule": "AWS Config rule: ec2-paravirtual-instance-check",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks whether the virtualization type of an EC2 instance is paravirtual. The control fails if the virtualizationType of the EC2 instance is set to paravirtual.Linux Amazon Machine Images (AMIs) use one of two types of virtualization: paravirtual (PV) or hardware virtual machine (HVM). The main differences between PV and HVM AMIs are the way in which they boot and whether they can take advantage of special hardware extensions (CPU, network, and storage) for better performance.Historically, PV guests had better performance than HVM guests in many cases, but because of enhancements in HVM virtualization and the availability of PV drivers for HVM AMIs, this is no longer true. For more information, see Linux AMI virtualization types in the Amazon EC2 User Guide.",
    "remediation": "To update an EC2 instance to a new instance type, see Change the instance type in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.25] Amazon EC2 launch templates should not assign public\n                IPs to network interfaces",
    "url": "[[EC2.25] Amazon EC2 launch templates should not assign public\n                IPs to network interfaces](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-25)",
    "related_requirements": "Related requirements: NIST.800-53.r5 AC-21,\n            NIST.800-53.r5 AC-3, NIST.800-53.r5 AC-3(7), NIST.800-53.r5 AC-4, NIST.800-53.r5\n            AC-4(21), NIST.800-53.r5 AC-6, NIST.800-53.r5 SC-7, NIST.800-53.r5 SC-7(11),\n            NIST.800-53.r5 SC-7(16), NIST.800-53.r5 SC-7(20), NIST.800-53.r5 SC-7(21),\n            NIST.800-53.r5 SC-7(3), NIST.800-53.r5 SC-7(4), NIST.800-53.r5 SC-7(9)",
    "category": "Category: Protect > Secure network configuration > Resources not publicly accessible",
    "severity": "Severity: High ",
    "resource_type": "Resource\n                type:AWS::EC2::LaunchTemplate",
    "config_rule": "AWS Config rule: ec2-launch-template-public-ip-disabled",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks if Amazon EC2 launch templates are configured to assign public IP addresses to network interfaces upon launch. The control fails if an EC2 launch template is configured to assign a public IP address to network interfaces or if there is at least one network interface that has a public IP address.A public IP address is one that is reachable from the internet. If you configure your network interfaces with a public IP address, then the resources associated with those network interfaces may be reachable from the internet. EC2 resources shouldn't be publicly accessible because this may permit unintended access to your workloads.",
    "remediation": "To update an EC2 launch template, see Change the default network interface settings in the Amazon EC2 Auto Scaling User Guide."
  },
  {
    "control_id": "[EC2.28] EBS volumes should be covered by a backup\n                plan",
    "url": "[[EC2.28] EBS volumes should be covered by a backup\n                plan](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-28)",
    "related_requirements": "Category: Recover > Resilience > Backups\n            enabled",
    "category": "Related requirements: NIST.800-53.r5 CP-10,\n            NIST.800-53.r5 CP-6, NIST.800-53.r5 CP-6(1), NIST.800-53.r5 CP-6(2), NIST.800-53.r5\n            CP-9, NIST.800-53.r5 SC-5(2), NIST.800-53.r5 SI-12, NIST.800-53.r5 SI-13(5)",
    "severity": "Severity: Low",
    "resource_type": "Resource type:\nAWS::EC2::Volume",
    "config_rule": "AWS Config rule: ebs-resources-protected-by-backup-plan",
    "schedule_type": "Schedule type: Periodic",
    "parameters": "Parameters:",
    "description": "This control evaluates if an Amazon EBS volume in in-use state is covered by a backup plan. The control fails if an EBS volume isn't covered by a backup plan. If you set the backupVaultLockCheck parameter equal to true, the control passes only if the EBS volume is backed up in an AWS Backup locked vault.Backups help you recover more quickly from a security incident. They also strengthen the resilience of your systems. Including Amazon EBS volumes in a backup plan helps you protect your data from unintended loss or deletion.",
    "remediation": "To add an Amazon EBS volume to an AWS Backup backup plan, see Assigning resources to a backup plan in the AWS Backup Developer Guide."
  },
  {
    "control_id": "[EC2.33] EC2 transit gateway attachments should be tagged",
    "url": "[[EC2.33] EC2 transit gateway attachments should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-33)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::TransitGatewayAttachment",
    "resource_type": "AWS Config rule: tagged-ec2-transitgatewayattachment (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 transit gateway attachment has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the transit gateway attachment doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the transit gateway attachment isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 transit gateway attachment, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.34] EC2 transit gateway route tables should be tagged",
    "url": "[[EC2.34] EC2 transit gateway route tables should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-34)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::TransitGatewayRouteTable",
    "resource_type": "AWS Config rule: tagged-ec2-transitgatewayroutetable (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 transit gateway route table has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the transit gateway route table doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the transit gateway route table isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 transit gateway route table, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.35] EC2 network interfaces should be tagged",
    "url": "[[EC2.35] EC2 network interfaces should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-35)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::NetworkInterface",
    "resource_type": "AWS Config rule: tagged-ec2-networkinterface (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 network interface has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the network interface doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the network interface isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 network interface, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.36] EC2 customer gateways should be tagged",
    "url": "[[EC2.36] EC2 customer gateways should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-36)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::CustomerGateway",
    "resource_type": "AWS Config rule: tagged-ec2-customergateway (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 customer gateway has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the customer gateway doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the customer gateway isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 customer gateway, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.37] EC2 Elastic IP addresses should be tagged",
    "url": "[[EC2.37] EC2 Elastic IP addresses should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-37)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::EIP",
    "resource_type": "AWS Config rule: tagged-ec2-eip (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 Elastic IP address has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the Elastic IP address doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the Elastic IP address isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 Elastic IP address, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.38] EC2 instances should be tagged",
    "url": "[[EC2.38] EC2 instances should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-38)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::Instance",
    "resource_type": "AWS Config rule: tagged-ec2-instance (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 instance has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the instance doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the instance isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 instance, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.39] EC2 internet gateways should be tagged",
    "url": "[[EC2.39] EC2 internet gateways should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-39)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::InternetGateway",
    "resource_type": "AWS Config rule: tagged-ec2-internetgateway (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 internet gateway has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the internet gateway doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the internet gateway isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 internet gateway, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.40] EC2 NAT gateways should be tagged",
    "url": "[[EC2.40] EC2 NAT gateways should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-40)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::NatGateway",
    "resource_type": "AWS Config rule: tagged-ec2-natgateway (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 network address translation (NAT) gateway has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the NAT gateway doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the NAT gateway isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 NAT gateway, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.41] EC2 network ACLs should be tagged",
    "url": "[[EC2.41] EC2 network ACLs should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-41)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::NetworkAcl",
    "resource_type": "AWS Config rule: tagged-ec2-networkacl (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 network access control list (network ACL) has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the network ACL doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the network ACL isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 network ACL, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.42] EC2 route tables should be tagged",
    "url": "[[EC2.42] EC2 route tables should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-42)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::RouteTable",
    "resource_type": "AWS Config rule: tagged-ec2-routetable (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 route table has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the route table doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the route table isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 route table, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.43] EC2 security groups should be tagged",
    "url": "[[EC2.43] EC2 security groups should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-43)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::SecurityGroup",
    "resource_type": "AWS Config rule: tagged-ec2-securitygroup (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 security group has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the security group doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the security group isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 security group, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.44] EC2 subnets should be tagged",
    "url": "[[EC2.44] EC2 subnets should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-44)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::Subnet",
    "resource_type": "AWS Config rule: tagged-ec2-subnet (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 subnet has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the subnet doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the subnet isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 subnet, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.45] EC2 volumes should be tagged",
    "url": "[[EC2.45] EC2 volumes should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-45)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::Volume",
    "resource_type": "AWS Config rule: tagged-ec2-subnet (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 volume has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the volume doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the volume isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 volume, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.46] Amazon VPCs should be tagged",
    "url": "[[EC2.46] Amazon VPCs should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-46)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::VPC",
    "resource_type": "AWS Config rule: tagged-ec2-vpc (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon Virtual Private Cloud (Amazon VPC) has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the Amazon VPC doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the Amazon VPC isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to a VPC, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.47] Amazon VPC endpoint services should be tagged",
    "url": "[[EC2.47] Amazon VPC endpoint services should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-47)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::VPCEndpointService",
    "resource_type": "AWS Config rule: tagged-ec2-vpcendpointservice (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon VPC endpoint service has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the endpoint service doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the endpoint service isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an Amazon VPC endpoint service, see Manage Tags in the Configure an endpoint service section of the AWS PrivateLink Guide."
  },
  {
    "control_id": "[EC2.48] Amazon VPC flow logs should be tagged",
    "url": "[[EC2.48] Amazon VPC flow logs should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-48)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::FlowLog",
    "resource_type": "AWS Config rule: tagged-ec2-flowlog (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon VPC flow log has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the flow log doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the flow log isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an Amazon VPC flow log, see Tag a flow log in the Amazon VPC User Guide."
  },
  {
    "control_id": "[EC2.49] Amazon VPC peering connections should be tagged",
    "url": "[[EC2.49] Amazon VPC peering connections should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-49)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::VPCPeeringConnection",
    "resource_type": "AWS Config rule: tagged-ec2-vpcpeeringconnection (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon VPC peering connection has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the peering connection doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the peering connection isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an Amazon VPC peering connection, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.50] EC2 VPN gateways should be tagged",
    "url": "[[EC2.50] EC2 VPN gateways should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-50)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::VPNGateway",
    "resource_type": "AWS Config rule: tagged-ec2-vpngateway (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 VPN gateway has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the VPN gateway doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the VPN gateway isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 VPN gateway, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.51] EC2 Client VPN endpoints should have client connection logging enabled",
    "url": "[[EC2.51] EC2 Client VPN endpoints should have client connection logging enabled](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-51)",
    "related_requirements": "Related requirements: NIST.800-53.r5 AC-2(12),\n            NIST.800-53.r5 AC-2(4),\n            NIST.800-53.r5 AC-4(26),\n            NIST.800-53.r5 AC-6(9),\n            NIST.800-53.r5 AU-10,\n            NIST.800-53.r5 AU-12,\n            NIST.800-53.r5 AU-2,\n            NIST.800-53.r5 AU-3,\n            NIST.800-53.r5 AU-6(3),\n            NIST.800-53.r5 AU-6(4),\n            NIST.800-53.r5 AU-9(7),\n            NIST.800-53.r5 CA-7,\n            NIST.800-53.r5 SC-7(9),\n            NIST.800-53.r5 SI-3(8),\n            NIST.800-53.r5 SI-4,\n            NIST.800-53.r5 SI-4(20),\n            NIST.800-53.r5 SI-7(8)",
    "category": "Category: Identify > Logging",
    "severity": "Severity: Low",
    "resource_type": "Resource type:\nAWS::EC2::ClientVpnEndpoint",
    "config_rule": "AWS Config rule: ec2-client-vpn-connection-log-enabled",
    "schedule_type": "Schedule type: Change triggered",
    "parameters": "Parameters: None",
    "description": "This control checks whether an AWS Client VPN endpoint has client connection logging enabled. The control fails if the endpoint doesn't have client connection logging enabled.Client VPN endpoints allow remote clients to securely connect to resources in a Virtual Private Cloud (VPC) in AWS. Connection logs allow you to track user activity on the VPN endpoint and provides visibility. When you enable connection logging, you can specify the name of a log stream in the log group. If you don't specify a log stream, the Client VPN service creates one for you.",
    "remediation": "To enable connection logging, see Enable connection logging for an existing Client VPN endpoint in the AWS Client VPN Administrator Guide."
  },
  {
    "control_id": "[EC2.52] EC2 transit gateways should be tagged",
    "url": "[[EC2.52] EC2 transit gateways should be tagged](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-52)",
    "related_requirements": "Category: Identify > Inventory > Tagging",
    "category": "Severity: Low",
    "severity": "Resource type:\nAWS::EC2::TransitGateway",
    "resource_type": "AWS Config rule: tagged-ec2-transitgateway (custom Security Hub rule)",
    "config_rule": "Schedule type: Change triggered",
    "schedule_type": "Parameters:",
    "parameters": "This control checks whether an Amazon EC2 transit gateway has tags with the specific keys defined in the parameter \n            requiredTagKeys. The control fails if the transit gateway doesn’t have any tag keys or if it doesn’t have all the keys specified in the \n            parameter requiredTagKeys. If the parameter requiredTagKeys isn't provided, the control only checks for the existence \n            of a tag key and fails if the transit gateway isn't tagged with any key. System tags, which are automatically applied and begin with aws:, \n            are ignored.",
    "description": "A tag is a label that you assign to an AWS resource, and it consists of a key and an optional value. You can create tags to categorize resources by purpose, owner, environment, or other criteria. Tags can help you identify, organize, search for, and filter resources. Tagging also helps you track accountable resource owners for actions and notifications. When you use tagging, you can implement attribute-based access control (ABAC) as an authorization strategy, which defines permissions based on tags. You can attach tags to IAM entities (users or roles) and to AWS resources. You can create a single ABAC policy or a separate set of policies for your IAM principals. You can design these ABAC policies to allow operations when the principal's tag matches the resource tag. For more information, see What is ABAC for AWS? in the IAM User Guide.",
    "remediation": "To add tags to an EC2 transit gateway, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide."
  },
  {
    "control_id": "[EC2.53] EC2 security groups should not allow ingress from\n                0.0.0.0/0 to remote server administration ports",
    "url": "[[EC2.53] EC2 security groups should not allow ingress from\n                0.0.0.0/0 to remote server administration ports](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-53)",
    "related_requirements": "Related requirements: CIS AWS Foundations Benchmark v3.0.0/5.2",
    "category": "Category: Protect > Secure network\n            configuration > Security group configuration",
    "severity": "Severity: High",
    "resource_type": "Resource type:\nAWS::EC2::SecurityGroup",
    "config_rule": "AWS Config rule: vpc-sg-port-restriction-check",
    "schedule_type": "Schedule type: Periodic",
    "parameters": "Parameters:",
    "description": "This control checks whether an Amazon EC2 security group allows ingress from 0.0.0.0/0 to remote server administration ports (ports 22 and 3389). The control fails if the security group allows ingress from 0.0.0.0/0 to port 22 or 3389.Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. We recommend that no security group allow unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389, using either the TDP (6), UDP (17), or ALL (-1) protocols. Permitting public access to these ports increases resource attack surface and the risk of resource compromise.",
    "remediation": "To update an EC2 security group rule to prohibit ingress traffic to the specified ports, see Update security group rules in the Amazon EC2 User Guide. After selecting a security group in the Amazon EC2 console, choose Actions, Edit inbound rules. Remove the rule that allows access to port 22 or port 3389."
  },
  {
    "control_id": "[EC2.54] EC2 security groups should not allow ingress from\n                ::/0 to remote server administration ports",
    "url": "[[EC2.54] EC2 security groups should not allow ingress from\n                ::/0 to remote server administration ports](https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-54)",
    "related_requirements": "Related requirements: CIS AWS Foundations Benchmark v3.0.0/5.3",
    "category": "Category: Protect > Secure network\n            configuration > Security group configuration",
    "severity": "Severity: High",
    "resource_type": "Resource type:\nAWS::EC2::SecurityGroup",
    "config_rule": "AWS Config rule: vpc-sg-port-restriction-check",
    "schedule_type": "Schedule type: Periodic",
    "parameters": "Parameters:",
    "description": "This control checks whether an Amazon EC2 security group allows ingress from ::/0 to remote server administration ports (ports 22 and 3389). The control fails if the security group allows ingress from ::/0 to port 22 or 3389.Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. We recommend that no security group allow unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389, using either the TDP (6), UDP (17), or ALL (-1) protocols. Permitting public access to these ports increases resource attack surface and the risk of resource compromise.",
    "remediation": "To update an EC2 security group rule to prohibit ingress traffic to the specified ports, see Update security group rules in the Amazon EC2 User Guide. After selecting a security group in the Amazon EC2 console, choose Actions, Edit inbound rules. Remove the rule that allows access to port 22 or port 3389."
  }
]
